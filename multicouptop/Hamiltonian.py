# -*- coding: utf-8 -*-
"""
Created on Tue Dec 24 06:12:30 2024

@author: 17664
"""

# This code is the definition of the class for hamiltonian, which discribes the S trains hopping with random potential.


#=========================== Packages and Settings ============================

import numpy as np
from scipy import sparse



#============================= Class of Hamiltonian ===========================

class Hamiltonian():
    def __init__(self,t1,lam,phi1,t2,tx,V_0,L,S,BC,phi3,translation):
        self.lam = lam
        self.b1 = (np.sqrt(5)-1)/2
        self.t1 = t1
        self.phi1 = phi1
        self.t2 = t2
        self.tx = tx
        self.V_0 = V_0
        self.L = L
        self.S = S
        self.BC = BC
        self.phi3 = phi3
        self.translation = translation
        self.H_size = self.S * self.L  
    """
    Applications
    ----------
    赋值变量。无返回值。
    """
    
     
    def get_hopping_list3_0(self,L,S,BC):    #t1    #逆时针0°和返回    #从上到下
        """  
        
        Applications
        ----------
        1. 用于得到链内左右跃迁对应的格点索引。例如：[[0,1],[1,2],[2,3]]
        
        Parameters
        ----------
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        BC : 正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        1. hopping_list: 链内左右跃迁对应的格点索引。
        
        Warnings
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

        """
        hopping_list = []
        for s in range(0,S,1):
            for l in range(0,L-1,1):    #已经剔除右边界
                hopping_list.append([s*L+l,s*L+l+1])
        if BC == 1:
            for s in range(0,S,1):
                hopping_list.append([s*L+L-1,s*L+0])
        return hopping_list



    def get_hopping_N_hamiltonian3_0(self,t1,lam,phi1,L,S,BC):
        """
      
        Applications
        ----------
        1. 用于得到链内左右往返跃迁对应的哈密顿量矩阵。
        
        Parameters
        ----------
        t1 : TYPE：正浮点数。
            DESCRIPTION. 链内左右往返跃迁（常数部分）的强度系数。
            
        lam : TYPE：正浮点数。
            DESCRIPTION. 链内左右往返跃迁的非公度无序调制系数。这里我们设为0即可。
            
        phi1 : TYPE：浮点数。
            DESCRIPTION. 链内左右往返跃迁的相位系数。这里我们设为0即可。
            
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
            
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        
        BC : TYPE：正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示链内左右往返跃迁对应的哈密顿量。

        Warnings
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

        """
        
        HI = []
        HJ = []
        HV = []
        hopping_list1 = self.get_hopping_list3_0(L,S,BC)
        for bit in hopping_list1:
            Pos0 = bit[0]
            Pos1 = bit[1]
            HI.append(Pos0)
            HJ.append(Pos1)
            HV.append(t1 + lam*np.cos(2*np.pi*self.b1*(Pos0-L*(Pos0//L))) + phi1)
            HI.append(Pos1)
            HJ.append(Pos0)
            HV.append(t1 + lam*np.cos(2*np.pi*self.b1*(Pos1-L*(Pos1//L))+1) + phi1)
        H = sparse.coo_matrix((HV,(HI,HJ)), shape = (self.H_size, self.H_size)).toarray()
        return H


    #-----------------------------------------------------------------------------
    def get_hopping_list4_0(self, L, S, BC):    #逆时针45°和返回    #左下到右上
        """

        Applications
        ----------
        1. 用于得到逆时针45°方向的往返跃迁，即左下-右上，或右上-左下跃迁对应的格点索引。例如：[[1,L],[L,1],[L+1,2],[2,L+1],...]
        
        Parameters
        ----------
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        BC : 正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        1. hopping_list: 逆时针45°方向的往返跃迁往返跃迁对应的格点索引。
        
        Warnings
        -------
        1. L至少几十，S不小于2。

        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

        """
        hopping_list = []
        for s in range(S-1,0,-1):    # 左下到右上    #已经剔除底边界和右边界
            for l in range(0,L-1,1):
                hopping_list.append([s*L+l,(s-1)*L+l+1])
        if BC == 1 and S>2:
            for l in range(0,L-1):    #仅跨上边界
                hopping_list.append([0*L+l,(S-1)*L+l+1])
            for s in range(S-1,0,-1):    #仅跨右边界
                hopping_list.append([s*L+(L-1),(s-1)*L+0])
            hopping_list.append([0*s+L-1,(S-1)*L+0])    #上边界和右边界都跨过
        return hopping_list

    def get_hopping_N_hamiltonian4_0(self,tx, L, S, BC):
        """
        Applications
        ----------
        1. 用于得到逆时针45°方向的往返跃迁，即左下-右上，或右上-左下跃迁对应的哈密顿量矩阵。

        Parameters
        ----------
        tx : TYPE：正浮点数。
            DESCRIPTION. 逆时针45°方向的往返跃迁的强度系数。
            
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
            
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        
        BC : TYPE：正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针45°方向的往返跃迁对应的哈密顿量。

        Warnings
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        """
        
        HI = []
        HJ = []
        HV = []
        hopping_list1 = self.get_hopping_list4_0(L, S, BC)
        for bit in hopping_list1:
            Pos0 = bit[0]
            Pos1 = bit[1]
            HI.append(Pos0)
            HJ.append(Pos1)
            HV.append(tx)
            HI.append(Pos1)
            HJ.append(Pos0)
            HV.append(tx)
        H = sparse.coo_matrix((HV,(HI,HJ)), shape = (self.H_size, self.H_size)).toarray()
        return H


    #-------------------------------------------------------------------------------
    # get hopping_list:L为尺寸，k为跃迁格点之间的距离
    def get_hopping_list2(self,L,S,BC):    #链间竖向耦合跃迁  t2=0    逆时针90°和返回    #从上到下
        """

        Applications
        ----------
        1. 用于得到逆时针90°方向的往返跃迁，即下-上，或上-下跃迁对应的格点索引。例如：[[0,L],[L,0],[L+1,1],[1,L+1],...]
        
        Parameters
        ----------
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        BC : 正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns：
        -------
        1. hopping_list: 上下往返跃迁对应的格点索引。
        
        Warnings
        -------
        1. L至少几十，S不小于2。

        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

        """
        hopping_list = []
        for s in range(0,S-1,1):    #已经剔除底边界
            for l in range(0,L,1):
                hopping_list.append([s*L+l,(s+1)*L+l])
        if BC == 1 and S>2:
            for l in range(0,L,1):
                hopping_list.append([(S-1)*L+l,0*L+l])
        return hopping_list
        

    def get_hopping_N_hamiltonian2(self,t2, L, S, BC):
        """
        
        Applications
        ----------
        1. 用于得到逆时针90°方向的往返跃迁，即下-上，或上-下跃迁对应的哈密顿量矩阵。

        Parameters
        ----------
        t2 : TYPE：正浮点数。
            DESCRIPTION. 上下往返跃迁的强度系数。
            
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
            
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        
        BC : TYPE：正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针45°方向的往返跃迁对应的哈密顿量。

        Warnings
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
     """
        
        HI = []
        HJ = []
        HV = []
        hopping_list1 = self.get_hopping_list2(L,S,BC)
        for bit in hopping_list1:
            Pos0 = bit[0]
            Pos1 = bit[1]
            HI.append(Pos0)
            HJ.append(Pos1)
            HV.append(t2)
            HI.append(Pos1)
            HJ.append(Pos0)
            HV.append(t2)
        H = sparse.coo_matrix((HV,(HI,HJ)), shape = (self.H_size, self.H_size)).toarray()
        return H  
        
        
    #-----------------------------------------------------------------------------------
    def get_hopping_list4_1(self,L,S,BC):    #对角跃迁tx    逆时针135°和返回    #从左上到右下
        """

        Applications
        ----------
        1. 用于得到逆时针135°方向的往返跃迁，即左上-右下，或右下-左上跃迁对应的格点索引。例如：[[0,L+1],[L+1,0],[1,L+2],[L+2,1],...]
        
        Parameters
        ----------
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        BC : 正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns：
        -------
        1. hopping_list: 逆时针135°方向的往返跃迁对应的格点索引。
        
        Warnings
        -------
        1. L至少几十，S不小于2。

        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        """
        
        hopping_list = []
        for s in range(0,S-1,1):    #已经剔除右边界和上边界    #从左上到右下
            for l in range(0,L-1,1):
                hopping_list.append([s*L+l,(s+1)*L+l+1])
        if BC==1 and S>2:
            for l in range(0,L-1,1):    #仅穿过下边界
                hopping_list.append([(S-1)*L+l,0*L+l+1])
            for s in range(0,S-1,1):
                hopping_list.append([s*L+(L-1),(s+1)*L+0])    #仅穿过右边界
            hopping_list.append([S*L-1,0])                    #右边界和下边界都跨过
        return hopping_list

    def get_hopping_N_hamiltonian4_1(self,tx, L, S, BC):
        """
        Applications
        ----------
        1. 用于得到逆时针135°方向的往返跃迁，即左上-右下，或右下-左上跃迁对应的哈密顿量矩阵。

        Parameters
        ----------
        tx : TYPE：正浮点数。
            DESCRIPTION. 逆时针135°方向的往返跃迁的强度系数。
            
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
            
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        
        BC : TYPE：正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针135°方向的往返跃迁对应的哈密顿量。

        Warnings
        -------
        1. L至少几十，S不小于2。
        2. tx的值，需要与逆时针45°往返跃迁的强度系数相同。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        """
        HI = []
        HJ = []
        HV = []
        hopping_list1 = self.get_hopping_list4_1(L,S,BC)
        for bit in hopping_list1:
            Pos0 = bit[0]
            Pos1 = bit[1]
            HI.append(Pos0)
            HJ.append(Pos1)
            HV.append(tx)
            HI.append(Pos1)
            HJ.append(Pos0)
            HV.append(tx)
        H = sparse.coo_matrix((HV,(HI,HJ)), shape = (self.H_size, self.H_size)).toarray()
        return H


    #------------------------------------------------------------------------------
    def get_potential_N_hamiltonian(self,V_0,phi3,L,S):#,h
        """
        Applications
        ----------
        1. 用于得到格点无序势对应的哈密顿量矩阵。

        Parameters
        ----------
        V_0 : TYPE：正浮点数。
            DESCRIPTION. 格点无序势的强度系数。
            
        phi3 :TYPE：正浮点数。
            DESCRIPTION. 格点无序势的相位。
            
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
            
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示格点无序势对应的哈密顿量。

        Warnings
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        
        """
        
        HI = []
        HJ = []
        HV = []
        alpha = (np.sqrt(5)-1)/2
        H_size = L*S
        for i in range(0,H_size,1):
            V = self.V_0*np.exp(1.0j*(2*np.pi*alpha*(i-(i//L)*L+1)+phi3))    #
            HI.append(i)
            HJ.append(i)
            HV.append(V)
        H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
        return H


    #------------------------------------------------------------------------------


    def get_hamiltonian(self,L, S, t1, t2, tx, V_0, lam, phi3, BC, translation, dtype='complex_'):
        """
        Applications
        ----------
        1. 用于得到多链系统的哈密顿量矩阵。

        Parameters
        ----------
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
        
        t1 : TYPE：正浮点数。
            DESCRIPTION. 链内左右往返跃迁的强度系数。
        
        t2 : TYPE：正浮点数。
            DESCRIPTION. 上下往返跃迁的强度系数。
               
        tx : TYPE：正浮点数。
            DESCRIPTION. 逆时针45°和135°方向的往返跃迁的强度系数。    
        
        V_0 : TYPE：正浮点数。
            DESCRIPTION. 格点无序势的强度系数。
            
        lam : TYPE：正浮点数。
            DESCRIPTION. 链内左右往返跃迁的非公度无序调制系数。这里我们设为0即可。
            
        phi3 : TYPE：正浮点数。
            DESCRIPTION. 格点无序势的相位。
            
        BC : TYPE：正整数，0或1。
            DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

        Returns
        -------
        H : TYPE： 矩阵。
            DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示格点无序势对应的哈密顿量。

        Warnings:
        -------
        1. L至少几十，S不小于2。
        
        Appendixs
        -------
        1. 格点编号方式    
        
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
        |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
        +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
 
        """
        H4_0 = self.get_hopping_N_hamiltonian4_0(tx, L, S, BC)
        H3_0 = self.get_hopping_N_hamiltonian3_0(t1,lam,self.phi1,L,S,BC)
        H4_1 = self.get_hopping_N_hamiltonian4_1(tx, L, S, BC)
        H2 = self.get_hopping_N_hamiltonian2(t2, L, S, BC)
        H5 = self.get_potential_N_hamiltonian(V_0,phi3,L,S)
        H_trans = self.translation * np.eye((self.H_size))
        H_translation = H2 + H3_0  + H4_0 + H4_1 + H5 - H_trans    #+ H3_1  # 能谱减去E_B=E_0，用于计算wingding number.
        return H_translation


    def get_Vc_k_list(self,L, S, t1, t2, tx, lam, phi3, BC, translation, dtype='complex_'):
        ep_k_array = np.zeros((S))
        for k in range(1,S+1,1):
            if S == 2:
                if BC == 0:
                    ep_k_array[k-1] = (2*np.cos(np.pi*k/(S+1))) 
                if BC == 1:
                    ep_k_array[k-1] = (2*np.cos(2*np.pi*k/S)) /2
            if S>2:
                if BC == 0:
                    ep_k_array[k-1] = (2*np.cos(np.pi*k/(S+1)))
                if BC == 1:
                    ep_k_array[k-1] = (2*np.cos(2*np.pi*k/S))
        Vc_k_list = (t1+tx*ep_k_array)
        return Vc_k_list




















