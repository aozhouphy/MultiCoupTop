# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 08:29:38 2024

@author: 17664
"""





# ========================== Packages and Settings ============================

import numpy as np
import scipy
import matplotlib.pyplot as plt
import time
import random
import os
import psutil
from matplotlib import rcParams
from tqdm import tqdm
#from tqdm.notebook import tqdm
from scipy import sparse

import matplotlib.colors as colors

from multiprocessing import Pool, freeze_support, cpu_count
import time

#from tabulate import tabulate    #用于输出文本对齐的表格



#from itertools import chain

#"""
# 将Numpy修改为单核运行。
import os

os.environ["MKL_NUM_THREADS"] = "1"
os.environ["NUMEXPR_NUM_THREADS"] = "1"
os.environ["OMP_NUM_THREADS"] = "1"
#"""

#----------------------------------Plot Setup--------------------------------------------
config = {
    "font.family":'serif',        
    "mathtext.fontset":'stix',    
    #"font.serif": ['SimSun'],     
    "axes.unicode_minus": False, 
    "xtick.direction":'in',       
    "ytick.direction":'in',      
}
rcParams.update(config)



from screeninfo import get_monitors
# 获取屏幕尺寸
monitor = get_monitors()[0]  # 假设只有一个屏幕
screen_width = monitor.width
screen_height = monitor.height*0.88    #给title留些位置，所以乘以了0.88

# 设置图表尺寸（减去一些边距以避免任务栏或其他界面元素）
fig_width = screen_width / 100  # 例如，假设屏幕宽度的100分之一作为边距
fig_height = screen_height / 100  # 同样，假设屏幕高度的100分之一作为边距

#================================= Functions ==================================

# read n-th bit:读出n位上的数为0或1
def read_bit(i,n):
     return (i&(1<<n))>>n
 
# flip n-th bit：反转第n位上的数为0或1
def flip_bit (i,n):
     return i^(1<<n)
 
#count_bit:读出i中有多少个1  
def count_bit(i):
    return bin(i).count("1")

#search_bit:将基矢标号
def search_i(basis, i):
    idex = 0
    for temp in basis:
        if temp == i:
           break
        idex = idex + 1
    return idex







#------------------------------------------------------------------------------
def get_hopping_list3_0(L,S,BC):    #t1    #逆时针0°和返回    #从上到下
    """  
    
    Applications
    ----------
    1. 用于得到链内左右跃迁对应的格点索引。例如：[[0,1],[1,2],[2,3]]
    
    Parameters
    ----------
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    BC : 正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    1. hopping_list: 链内左右跃迁对应的格点索引。
    
    Warnings
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    hopping_list = []
    for s in range(0,S,1):
        for l in range(0,L-1,1):    #已经剔除右边界
            hopping_list.append([s*L+l,s*L+l+1])
    if BC == 1:
        for s in range(0,S,1):
            hopping_list.append([s*L+L-1,s*L+0])
    return hopping_list



def get_hopping_N_hamiltonian3_0(t1,lam,phi1,L,S,BC):
    """
  
    Applications
    ----------
    1. 用于得到链内左右往返跃迁对应的哈密顿量矩阵。
    
    Parameters
    ----------
    t1 : TYPE：正浮点数。
        DESCRIPTION. 链内左右往返跃迁（常数部分）的强度系数。
        
    lam : TYPE：正浮点数。
        DESCRIPTION. 链内左右往返跃迁的非公度无序调制系数。这里我们设为0即可。
        
    phi1 : TYPE：浮点数。
        DESCRIPTION. 链内左右往返跃迁的相位系数。这里我们设为0即可。
        
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
        
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    
    BC : TYPE：正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示链内左右往返跃迁对应的哈密顿量。

    Warnings
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    
    HI = []
    HJ = []
    HV = []
    hopping_list1 = get_hopping_list3_0(L,S,BC)
    for bit in hopping_list1:
        Pos0 = bit[0]
        Pos1 = bit[1]
        HI.append(Pos0)
        HJ.append(Pos1)
        HV.append(t1 + lam*np.cos(2*np.pi*b1*(Pos0-L*(Pos0//L))) + phi1)
        HI.append(Pos1)
        HJ.append(Pos0)
        HV.append(t1 + lam*np.cos(2*np.pi*b1*(Pos1-L*(Pos1//L))+1) + phi1)
    H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
    return H


#-----------------------------------------------------------------------------
def get_hopping_list4_0(L, S, BC):    #逆时针45°和返回    #左下到右上
    """

    Applications
    ----------
    1. 用于得到逆时针45°方向的往返跃迁，即左下-右上，或右上-左下跃迁对应的格点索引。例如：[[1,L],[L,1],[L+1,2],[2,L+1],...]
    
    Parameters
    ----------
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    BC : 正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    1. hopping_list: 逆时针45°方向的往返跃迁往返跃迁对应的格点索引。
    
    Warnings
    -------
    1. L至少几十，S不小于2。

    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    hopping_list = []
    for s in range(S-1,0,-1):    # 左下到右上    #已经剔除底边界和右边界
        for l in range(0,L-1,1):
            hopping_list.append([s*L+l,(s-1)*L+l+1])
    if BC == 1 and S>2:
        for l in range(0,L-1):    #仅跨上边界
            hopping_list.append([0*L+l,(S-1)*L+l+1])
        for s in range(S-1,0,-1):    #仅跨右边界
            hopping_list.append([s*L+(L-1),(s-1)*L+0])
        hopping_list.append([0*s+L-1,(S-1)*L+0])    #上边界和右边界都跨过
    return hopping_list

def get_hopping_N_hamiltonian4_0(tx, L, S, BC):
    """
    Applications
    ----------
    1. 用于得到逆时针45°方向的往返跃迁，即左下-右上，或右上-左下跃迁对应的哈密顿量矩阵。

    Parameters
    ----------
    tx : TYPE：正浮点数。
        DESCRIPTION. 逆时针45°方向的往返跃迁的强度系数。
        
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
        
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    
    BC : TYPE：正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针45°方向的往返跃迁对应的哈密顿量。

    Warnings
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    HI = []
    HJ = []
    HV = []
    hopping_list1 = get_hopping_list4_0(L, S, BC)
    for bit in hopping_list1:
        Pos0 = bit[0]
        Pos1 = bit[1]
        HI.append(Pos0)
        HJ.append(Pos1)
        HV.append(tx)
        HI.append(Pos1)
        HJ.append(Pos0)
        HV.append(tx)
    H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
    return H


#-------------------------------------------------------------------------------
# get hopping_list:L为尺寸，k为跃迁格点之间的距离
def get_hopping_list2(L,S,BC):    #链间竖向耦合跃迁  t2=0    逆时针90°和返回    #从上到下
    """

    Applications
    ----------
    1. 用于得到逆时针90°方向的往返跃迁，即下-上，或上-下跃迁对应的格点索引。例如：[[0,L],[L,0],[L+1,1],[1,L+1],...]
    
    Parameters
    ----------
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    BC : 正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns：
    -------
    1. hopping_list: 上下往返跃迁对应的格点索引。
    
    Warnings
    -------
    1. L至少几十，S不小于2。

    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    hopping_list = []
    for s in range(0,S-1,1):    #已经剔除底边界
        for l in range(0,L,1):
            hopping_list.append([s*L+l,(s+1)*L+l])
    if BC == 1 and S>2:
        for l in range(0,L,1):
            hopping_list.append([(S-1)*L+l,0*L+l])
    return hopping_list
    

def get_hopping_N_hamiltonian2(t2, L, S, BC):
    """
    
    Applications
    ----------
    1. 用于得到逆时针90°方向的往返跃迁，即下-上，或上-下跃迁对应的哈密顿量矩阵。

    Parameters
    ----------
    t2 : TYPE：正浮点数。
        DESCRIPTION. 上下往返跃迁的强度系数。
        
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
        
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    
    BC : TYPE：正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针45°方向的往返跃迁对应的哈密顿量。

    Warnings
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    
    HI = []
    HJ = []
    HV = []
    hopping_list1 = get_hopping_list2(L,S,BC)
    for bit in hopping_list1:
        Pos0 = bit[0]
        Pos1 = bit[1]
        HI.append(Pos0)
        HJ.append(Pos1)
        HV.append(t2)
        HI.append(Pos1)
        HJ.append(Pos0)
        HV.append(t2)
    H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
    return H  
    
    
#-----------------------------------------------------------------------------------
def get_hopping_list4_1(L,S,BC):    #对角跃迁tx    逆时针135°和返回    #从左上到右下
    """

    Applications
    ----------
    1. 用于得到逆时针135°方向的往返跃迁，即左上-右下，或右下-左上跃迁对应的格点索引。例如：[[0,L+1],[L+1,0],[1,L+2],[L+2,1],...]
    
    Parameters
    ----------
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    BC : 正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns：
    -------
    1. hopping_list: 逆时针135°方向的往返跃迁对应的格点索引。
    
    Warnings
    -------
    1. L至少几十，S不小于2。

    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    hopping_list = []
    for s in range(0,S-1,1):    #已经剔除右边界和上边界    #从左上到右下
        for l in range(0,L-1,1):
            hopping_list.append([s*L+l,(s+1)*L+l+1])
    if BC==1 and S>2:
        for l in range(0,L-1,1):    #仅穿过下边界
            hopping_list.append([(S-1)*L+l,0*L+l+1])
        for s in range(0,S-1,1):
            hopping_list.append([s*L+(L-1),(s+1)*L+0])    #仅穿过右边界
        hopping_list.append([S*L-1,0])                    #右边界和下边界都跨过
    return hopping_list

def get_hopping_N_hamiltonian4_1(tx, L, S, BC):
    """
    Applications
    ----------
    1. 用于得到逆时针135°方向的往返跃迁，即左上-右下，或右下-左上跃迁对应的哈密顿量矩阵。

    Parameters
    ----------
    tx : TYPE：正浮点数。
        DESCRIPTION. 逆时针135°方向的往返跃迁的强度系数。
        
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
        
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    
    BC : TYPE：正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示逆时针135°方向的往返跃迁对应的哈密顿量。

    Warnings
    -------
    1. L至少几十，S不小于2。
    2. tx的值，需要与逆时针45°往返跃迁的强度系数相同。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    HI = []
    HJ = []
    HV = []
    hopping_list1 = get_hopping_list4_1(L,S,BC)
    for bit in hopping_list1:
        Pos0 = bit[0]
        Pos1 = bit[1]
        HI.append(Pos0)
        HJ.append(Pos1)
        HV.append(tx)
        HI.append(Pos1)
        HJ.append(Pos0)
        HV.append(tx)
    H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
    return H


#------------------------------------------------------------------------------
def get_potential_N_hamiltonian(V_0,phi3,L,S):#,h
    """
    Applications
    ----------
    1. 用于得到格点无序势对应的哈密顿量矩阵。

    Parameters
    ----------
    V_0 : TYPE：正浮点数。
        DESCRIPTION. 格点无序势的强度系数。
        
    phi3 :TYPE：正浮点数。
        DESCRIPTION. 格点无序势的相位。
        
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
        
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示格点无序势对应的哈密顿量。

    Warnings
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    HI = []
    HJ = []
    HV = []
    alpha = (np.sqrt(5)-1)/2
    H_size = L*S
    for i in range(0,H_size,1):
        V = V_0*np.exp(1.0j*(2*np.pi*alpha*(i-(i//L)*L+1)+phi3))    #
        HI.append(i)
        HJ.append(i)
        HV.append(V)
    H = sparse.coo_matrix((HV,(HI,HJ)), shape = (H_size, H_size)).toarray()
    return H


#------------------------------------------------------------------------------


def get_hamiltonian(L, S, t1, t2,tx,V_0, lam, phi3, BC, dtype='complex_'):
    """
    Applications
    ----------
    1. 用于得到多链系统的哈密顿量矩阵。

    Parameters
    ----------
    L : TYPE：正整数
        DESCRIPTION. 用于耦合的每一条链的长度。
    
    S : TYPE：正整数
        DESCRIPTION. 用于耦合的单链的数量。
    
    t1 : TYPE：正浮点数。
        DESCRIPTION. 链内左右往返跃迁的强度系数。
    
    t2 : TYPE：正浮点数。
        DESCRIPTION. 上下往返跃迁的强度系数。
           
    tx : TYPE：正浮点数。
        DESCRIPTION. 逆时针45°和135°方向的往返跃迁的强度系数。    
    
    V_0 : TYPE：正浮点数。
        DESCRIPTION. 格点无序势的强度系数。
        
    lam : TYPE：正浮点数。
        DESCRIPTION. 链内左右往返跃迁的非公度无序调制系数。这里我们设为0即可。
        
    phi3 : TYPE：正浮点数。
        DESCRIPTION. 格点无序势的相位。
        
    BC : TYPE：正整数，0或1。
        DESCRIPTION. BC = 1表示周期性边界条件，BC=0表示开边界条件。

    Returns
    -------
    H : TYPE： 矩阵。
        DESCRIPTION. 尺寸为SL*SL的矩阵，用于表示格点无序势对应的哈密顿量。

    Warnings:
    -------
    1. L至少几十，S不小于2。
    
    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    H4_0 = get_hopping_N_hamiltonian4_0(tx, L, S, BC)
    H3_0 = get_hopping_N_hamiltonian3_0(t1,lam,phi1,L,S,BC)
    H4_1 = get_hopping_N_hamiltonian4_1(tx, L, S, BC)
    H2 = get_hopping_N_hamiltonian2(t2, L, S, BC)
    H5 = get_potential_N_hamiltonian(V_0,phi3,L,S)
    H = H2 + H3_0 + H4_0 + H4_1 + H5 #H3_1 +
    return H


#------------------------------------------------------------------------------

def getEvEs(H):  
    """
    Applications
    ----------
    1. 输入哈密顿量矩阵，用于得到其本征值和本征态；两者均已按照本征值从小到大排序。
    
    Parameters
    ----------
    H : TYPE: 矩阵
        DESCRIPTION. 哈密顿量矩阵。

    Returns
    -------
    Ev: TYPE：数组
        DESCRIPTION. 储存有从小到大排序的本征值的数组。

    Es: TYPE：数组
        DESCRIPTION. 储存有对应的本征态的数组。其中，每一列表示（对应位置的本征值的对应的）一个本征态，每一列的每一行的那个数，表示该本征态在行对应的基矢上的投影。
    

    ev,es = np.linalg.eig(H)
    index = np.argsort(ev)
    Ev = ev[index]
    Es = es[:,index]
    return Ev,Es


#================================== Parameters ================================
BC = 1                                                    # 边界条件
S = 4                                                     # 耦合链数量

b1 = (np.sqrt(5)-1)/2                                     # 非公度无序势中的无理数
L = 144                                                   # 单链长度
t1 = 1.0 # hopping amplitude 1                            # 参数，链内左右往返跃迁强度的常数部分
tx = 0.2                                                  # 逆时针45°、135°往返跃迁强度参数
t2 = 0  #0.5                                              # 逆时针90°（上下）往返跃迁强度参数
V_0_array = np.arange(0.5, 1.5*t1+0.0001, 0.005)          # 存储用于计算的无序势强度参数的数组
lam_array = [0]                                           # 数组，存储链内左右往返跃迁的无序调制强度参数；这里固定数组的值为零，即令链内左右往返跃迁为常数t1。
H_size = S*L                                              # 多链系统的总格点数
lam = 0                                                   # 链内左右往返跃迁的无序调制强度参数；这里固定其值为零，即令链内左右往返跃迁为常数t1。
phi1 = 0                                                  # 链内左右往返跃迁的相位参数。这里我们设为0即可。
phi3 = 0                                                  # 格点无序势相位参数。这里我们设为0即可。





#================================== Plot ======================================




def compute_E(params):    #compute_MIPR(params):
    """

    Parameters
    ----------
    params : TYPE：数列
        DESCRIPTION. 输入参数，一般为 i, j, lam_array, V_0_array, L, S, tx, t1, t2。
        
        i,j：TYPE：非负整数
            DESCRIPTION. 用于从某个多链系统参数取值数组中，指定当下参数值的索引。该索引需要在调用函数前人为指定。

        lam_array： TYPE：数组
            DESCRIPTION. 用于存储所有参与计算的参数lam的数组。lam是描述链内左右往返跃迁的无序调制强度的参数。
        
        V_0_array： TYPE：数组
            DESCRIPTION. 用于存储所有参与计算的参数V_0的数组。V_0是描述格点无序势强度的参数。
        
        L : TYPE：正整数
            DESCRIPTION. 用于耦合的每一条链的长度。
        
        S : TYPE：正整数
            DESCRIPTION. 用于耦合的单链的数量。
            
        tx : TYPE：正浮点数。
            DESCRIPTION. 逆时针45°和135°方向的往返跃迁的强度系数。 
            
        t1 : TYPE：正浮点数。
            DESCRIPTION. 链内左右往返跃迁的强度系数。
        
        t2 : TYPE：正浮点数。
            DESCRIPTION. 上下往返跃迁的强度系数。
 
    Returns
    -------
    E : TYPE：数组
        DESCRIPTION. 返回存有哈密顿量本征值的数组，其中本征值已经按照从小到大排列。
        
    ES : TYPE：数组
        DESCRIPTION. 储存有对应的本征态的数组。其中，每一列表示（对应位置的本征值的对应的）一个本征态，每一列的每一行的那个数，表示该本征态在行对应的基矢上的投影。
        
    IPR : TYPE： 数组。
        DESCRIPTION. 储存有本征态对应的IPR的数组。其中，每一列表示对应本征态的IPR。
        
    MIPR : TYPE： 正浮点数。
        DESCRIPTION. 该参数下多链系统的平均IPR值。
        
    MTau : TYPE： 正浮点数。
        DESCRIPTION. 该参数下多链系统的平均分形维度Tau值。

    Appendixs
    -------
    1. 格点编号方式    
    
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 0       |          0,      |           1,     |          2,      |         ...,      |         L-3,     |          L-2,      |        L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 1       |          L,      |         L+1,     |        L+2,      |         ...,      |        2L-3,     |         2L-2,      |       2L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 2       |         2L,      |        2L+1,     |       2L+2,      |         ...,      |        3L-3,     |         3L-2,      |       3L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 3       |         3L,      |        3L+1,     |       3L+2,      |         ...,      |        4L-3,     |         4L-2,      |       4L-1         |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 4       |        ...,      |        ...,      |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 5       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 6       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |  
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = 7       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                     
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |        ...,      |         ...,     |        ...,      |        ...,       |         ...,     |          ...,      |          ...,      |                                                                          
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      ......,     |     ......,      |     ......,      |     ......,      |     ......,       |     ......,      |      ......,       |      ......,       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |       ...,       |       ...,       |        ...,      |       ...,       |        ...,       |       ...,       |        ...,        |        ...,        |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-4     |     (S-4)L,      |    (S-4)L+1,     |     (S-4)L+2,    |        ...,       |    (S-3)L-3,     |     (S-3)L-2,      |     (S-3)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-3     |     (S-3)L,      |    (S-3)L+1,     |     (S-3)L+2,    |        ...,       |    (S-2)L-3,     |     (S-2)L-2,      |     (S-2)L-1       |                                      
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-2     |     (S-2)L,      |    (S-2)L+1,     |     (S-2)L+2,    |        ...,       |    (S-1)L-3,     |     (S-1)L-2,      |     (S-1)L-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+
    |      s = S-1     |     (S-1)L,      |    (S-1)L+1,     |     (S-1)L+2,    |        ...,       |        SL-3,     |         SL-2,      |         SL-1       |
    +------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+--------------------+

    """
    i, j, lam_array, V_0_array, L, S, tx, t1, t2 = params
    lam = lam_array[i]
    V_0 = V_0_array[j]
    ev, es = np.linalg.eig(get_hamiltonian(L, S, t1, t2, tx, V_0, lam, phi3, BC, dtype='complex_'))
    sorted_indices = np.argsort(ev)
    E = ev[sorted_indices]
    ES = es[:,sorted_indices]
    P = np.conj(ES)*ES
    IPR = np.sum(P**2,axis=0)/(np.sum(P,axis=0)**2)
    MIPR = np.sum(IPR,axis=0)/H_size
    MTau = np.sum(-np.log(IPR)/np.log(H_size),axis=0)/H_size
    return E,ES,IPR,MIPR,MTau



if __name__ == "__main__":
    params = [(i, j, lam_array, V_0_array, L, S, tx, t1, t2) for i in range(len(lam_array)) for j in range(len(V_0_array))]

    with Pool(processes = cpu_count()) as pool:
        # 使用tqdm的imap方法来添加进度条
        results = list(tqdm(pool.imap(compute_E, params), total=len(params)))
    # 将结果转换回二维数组形式
    E_results, ES_results, IPR_results, MIPR_results, MTau_results = zip(*results)    #zip函数解压是一一交错搭配的。[[E1,IPR1],[E2,IPR2],[E3,IPR3],...] --> [E1,E2,E3,...],[IPR1,IPR2,IPR3,...]
    E_array = np.array(E_results)
    ES_array = np.array(ES_results)
    IPR_array = np.array(IPR_results)    
    MIPR_array = np.array(MIPR_results).reshape(len(lam_array), len(V_0_array))
    MTau_array = np.array(MTau_results).reshape(len(lam_array), len(V_0_array))
    E_array_real = np.real(E_array)
    E_array_imag = np.imag(E_array)
    
    
#----------------------------------- 解析结果 ----------------------------------    
    """
    k = 1, 2, 3, ... , S-1, S，只是S*S矩阵ε的本征值索引，不是动量！
    下面这段代码用于给出 S>=2 的所有相变点解析值。
    """
    
    ep_k_array = np.zeros((S))    
    for k in range(1,S+1,1):
        if S == 2:
            if BC == 0:
                ep_k_array[k-1] = (2*np.cos(np.pi*k/(S+1))) 
            if BC == 1:
                ep_k_array[k-1] = (2*np.cos(2*np.pi*k/S)) /2
        if S>2:
            if BC == 0:
                ep_k_array[k-1] = (2*np.cos(np.pi*k/(S+1)))
            if BC == 1:
                ep_k_array[k-1] = (2*np.cos(2*np.pi*k/S))
    V_c_k_list = (t1+tx*ep_k_array)    # 相变点的V值。
    
    

#--------------------------------------Plot------------------------------------ 
    fig, ax = plt.subplots(figsize=(fig_width,fig_height))
    ax.tick_params(labelsize=32)
    plt.figure(1)  
    sc = plt.plot(V_0_array,MTau_array[0,:])

    for vertical_line_x in V_c_k_list: 
        # 使用plt.axvline绘制竖线，用于表示相变点。
        plt.axvline(x=vertical_line_x, color='r', linestyle='--')      # 'r'表示红色，'--'表示虚线
        
    plt.title(f'$t_x$={tx}, L={L},ChainNumber={S},BC={BC},$V(i)=V_0*e^{{1.0j*(2*\\pi*\\alpha*(i-(i//L)*L+1)+\\phi_3)}}$', fontsize=20)
    plt.xlabel('$V_0$',fontsize=42)
    plt.ylabel('MTau',fontsize=42)
    plt.show()



























